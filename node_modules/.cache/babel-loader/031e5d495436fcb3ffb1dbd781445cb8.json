{"ast":null,"code":"const clientId = 'a20517ae05334c488d34ff0cf6310cbf';\nconst redirectUri = 'http://localhost:3000/';\nlet accessToken;\nconst Spotify = {\n  getAcessToken() {\n    if (accessToken) {\n      return accessToken;\n    } //check for access token match\n\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]); // This clears the parameters, a llowing us to grab a new access token when it expires \n\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAcessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  },\n\n  savePlayList(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAcessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    let userId;\n  }\n\n};\nexport default Spotify;","map":{"version":3,"names":["clientId","redirectUri","accessToken","Spotify","getAcessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlayList","trackUris","length","userId"],"sources":["/Users/nnannaforever/jamming/src/util/Spotify.js"],"sourcesContent":["const clientId = 'a20517ae05334c488d34ff0cf6310cbf';\nconst redirectUri = 'http://localhost:3000/';\nlet accessToken;\n\nconst Spotify = {\n    getAcessToken() {\n        if (accessToken) {\n            return accessToken;\n        }\n\n        //check for access token match\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n        if (accessTokenMatch && expiresInMatch) {\n            accessToken = accessTokenMatch[1];\n            const expiresIn = Number(expiresInMatch[1]);\n            // This clears the parameters, a llowing us to grab a new access token when it expires \n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n            return accessToken;\n        }   else {\n            const accessUrl = `https://accounts.spotify.com/authorize?client_${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`\n            window.location = accessUrl;\n        }\n    },\n\n    search(term) {\n        const accessToken = Spotify.getAcessToken();\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`,\n        { headers: {\n            Authorization: `Bearer ${accessToken}`\n        }\n        }).then(response => {\n            return response.json();\n        }).then(jsonResponse => {\n            if(!jsonResponse.tracks) {\n                return [];\n            } \n                return jsonResponse.tracks.items.map(track => ({\n                    id: track.id,\n                    name: track.name,\n                    artist: track.artists[0].name,\n                    album: track.album.name,\n                    uri: track.uri\n                }));       \n        });\n    },\n\n    savePlayList(name, trackUris) {\n        if (!name || !trackUris.length) {\n            return;\n        }\n\n        const accessToken = Spotify.getAcessToken();\n        const headers = { Authorization: `Bearer ${accessToken}`};\n        let userId;\n    }\n}\n\n\n\nexport default Spotify"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,kCAAjB;AACA,MAAMC,WAAW,GAAG,wBAApB;AACA,IAAIC,WAAJ;AAEA,MAAMC,OAAO,GAAG;EACZC,aAAa,GAAG;IACZ,IAAIF,WAAJ,EAAiB;MACb,OAAOA,WAAP;IACH,CAHW,CAKZ;;;IACA,MAAMG,gBAAgB,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,sBAA3B,CAAzB;IACA,MAAMC,cAAc,GAAGJ,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,oBAA3B,CAAvB;;IAEA,IAAIJ,gBAAgB,IAAIK,cAAxB,EAAwC;MACpCR,WAAW,GAAGG,gBAAgB,CAAC,CAAD,CAA9B;MACA,MAAMM,SAAS,GAAGC,MAAM,CAACF,cAAc,CAAC,CAAD,CAAf,CAAxB,CAFoC,CAGpC;;MACAJ,MAAM,CAACO,UAAP,CAAkB,MAAMX,WAAW,GAAG,EAAtC,EAA0CS,SAAS,GAAG,IAAtD;MACAL,MAAM,CAACQ,OAAP,CAAeC,SAAf,CAAyB,cAAzB,EAAyC,IAAzC,EAA+C,GAA/C;MACA,OAAOb,WAAP;IACH,CAPD,MAOS;MACL,MAAMc,SAAS,GAAI,iDAAgDhB,QAAS,kEAAiEC,WAAY,EAAzJ;MACAK,MAAM,CAACC,QAAP,GAAkBS,SAAlB;IACH;EACJ,CArBW;;EAuBZC,MAAM,CAACC,IAAD,EAAO;IACT,MAAMhB,WAAW,GAAGC,OAAO,CAACC,aAAR,EAApB;IACA,OAAOe,KAAK,CAAE,kDAAiDD,IAAK,EAAxD,EACZ;MAAEE,OAAO,EAAE;QACPC,aAAa,EAAG,UAASnB,WAAY;MAD9B;IAAX,CADY,CAAL,CAIJoB,IAJI,CAICC,QAAQ,IAAI;MAChB,OAAOA,QAAQ,CAACC,IAAT,EAAP;IACH,CANM,EAMJF,IANI,CAMCG,YAAY,IAAI;MACpB,IAAG,CAACA,YAAY,CAACC,MAAjB,EAAyB;QACrB,OAAO,EAAP;MACH;;MACG,OAAOD,YAAY,CAACC,MAAb,CAAoBC,KAApB,CAA0BC,GAA1B,CAA8BC,KAAK,KAAK;QAC3CC,EAAE,EAAED,KAAK,CAACC,EADiC;QAE3CC,IAAI,EAAEF,KAAK,CAACE,IAF+B;QAG3CC,MAAM,EAAEH,KAAK,CAACI,OAAN,CAAc,CAAd,EAAiBF,IAHkB;QAI3CG,KAAK,EAAEL,KAAK,CAACK,KAAN,CAAYH,IAJwB;QAK3CI,GAAG,EAAEN,KAAK,CAACM;MALgC,CAAL,CAAnC,CAAP;IAOP,CAjBM,CAAP;EAkBH,CA3CW;;EA6CZC,YAAY,CAACL,IAAD,EAAOM,SAAP,EAAkB;IAC1B,IAAI,CAACN,IAAD,IAAS,CAACM,SAAS,CAACC,MAAxB,EAAgC;MAC5B;IACH;;IAED,MAAMpC,WAAW,GAAGC,OAAO,CAACC,aAAR,EAApB;IACA,MAAMgB,OAAO,GAAG;MAAEC,aAAa,EAAG,UAASnB,WAAY;IAAvC,CAAhB;IACA,IAAIqC,MAAJ;EACH;;AArDW,CAAhB;AA0DA,eAAepC,OAAf"},"metadata":{},"sourceType":"module"}